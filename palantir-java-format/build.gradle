apply plugin: 'application'
apply plugin: 'com.palantir.external-publish-jar'

mainClassName = 'com.palantir.javaformat.java.Main'

description = 'Palantir Java Format'


configurations {
    main21Implementation.extendsFrom(implementation)
    main21RuntimeClasspath.extendsFrom(runtimeClasspath)
    main21CompileOnly.extendsFrom(compileOnly)
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    main21 {
        java {
            srcDirs = ['src/main/java21']
        }
        resources {
            srcDirs = ['src/main/resources21']
        }
    }
    test21 {
        java {
            srcDirs = ['src/test/java21']
        }
        resources {
            srcDirs = ['src/test/resources21']
        }
    }
}


dependencies {
    api project(':palantir-java-format-spi')
    api 'com.google.guava:guava'

    implementation 'org.functionaljava:functionaljava'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'

    testImplementation 'com.google.guava:guava-testlib'
    testImplementation 'com.google.truth:truth'
    testImplementation 'com.google.testing.compile:compile-testing'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport'
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly 'com.google.auto.service:auto-service'
    annotationProcessor 'com.google.auto.service:auto-service'
    compileOnly "org.immutables:value::annotations"
    annotationProcessor "org.immutables:value"

    compileOnly 'org.derive4j:derive4j-annotation'
    annotationProcessor 'org.derive4j:derive4j'
}

def exports = [
        'jdk.compiler/com.sun.tools.javac.file',
        'jdk.compiler/com.sun.tools.javac.main',
        'jdk.compiler/com.sun.tools.javac.parser',
        'jdk.compiler/com.sun.tools.javac.tree',
        'jdk.compiler/com.sun.tools.javac.util',
        'jdk.compiler/com.sun.tools.javac.code',
        'jdk.compiler/com.sun.tools.javac.api'
]

def jvmArgList = exports.collect { value -> "--add-exports=${value}=ALL-UNNAMED".toString() }


tasks.named("compileMain21Java", JavaCompile) {
    dependsOn("compileJava")

    sourceCompatibility = 21
    targetCompatibility = 21
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    // only one destinationDirectory for the project
    destinationDirectory = sourceSets["main"].java.destinationDirectory
    // add dependency with the sourceset main
    classpath = sourceSets["main21"].compileClasspath.plus(layout.files(tasks.getAt("compileJava").outputs.getFiles().getFiles()))

}

tasks.named("compileTest21Java", JavaCompile) {
    dependsOn("compileTestJava")
    sourceCompatibility = 21
    targetCompatibility = 21
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


tasks.named("compileTestJava") {
    dependsOn("compileMain21Java")
}

tasks.named("classes") {
    dependsOn("compileMain21Java")
}

tasks.named("testClasses") {
    dependsOn("compileTest21Java")
}


//tasks.named("jar"){
//    dependsOn("compileMain21Java")
//}


tasks.withType(JavaCompile).configureEach {
    config ->
        {

            def currentLanguageVersion = config.javaCompiler.get().getMetadata().languageVersion.asInt()

            options.errorprone.disable 'StrictUnusedVariable'

            // Allow access to internal javac apis
            options.compilerArgs += jvmArgList


            if (currentLanguageVersion < 14) {
                excludes = ['**/java14/*.java', '**/java21/*.java']
            }
            if (14 < currentLanguageVersion && currentLanguageVersion < 21) {
                excludes = ['**/java21/*.java']
            }

            if (21 <= currentLanguageVersion) {
                options.compilerArgs += "--enable-preview"
                includes = ['**/java/java21/*.java']
                excludes = ['**/java/JavaInputAstVisitor.java']
            }
        }
}


tasks.withType(Test).configureEach {
    jvmArgs = jvmArgList
    if (it.javaVersion.getMajorVersion() == "21") {
        jvmArgs += "--enable-preview"
    }
}


tasks.withType(Javadoc).configureEach {
    dependsOn("compileMain21Java")
    // Allow access to internal javac apis
    options.optionFiles << file('../gradle/javadoc.options')

    if (JavaVersion.current() < JavaVersion.VERSION_14) {
        exclude '**/Java14InputAstVisitor.java'
    }
}

// false positives due to org.junit.runners.* in the test cases
tasks.named("checkJUnitDependencies") {
    enabled = false
}

tasks.named("test") {
    // Run all classes and tests in parallel
    // https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
}

// necessary to compile Java14InputAstVisitor
idea {
    module.languageLevel = new org.gradle.plugins.ide.idea.model.IdeaLanguageLevel(14)
}

// This block may be replaced by BaselineExportsExtension exports
// once https://github.com/gradle/gradle/issues/18824 is resolved.
tasks.named("jar", Jar) {
    manifest {
        attributes('Add-Exports': exports.join(' '))
    }
}
