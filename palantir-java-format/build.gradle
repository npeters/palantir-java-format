apply plugin: 'application'
apply plugin: 'com.palantir.external-publish-jar'

mainClassName = 'com.palantir.javaformat.java.Main'

description = 'Palantir Java Format'

dependencies {
    api project(':palantir-java-format-spi')
    api 'com.google.guava:guava'
    implementation 'org.functionaljava:functionaljava'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'

    testImplementation 'com.google.guava:guava-testlib'
    testImplementation 'com.google.truth:truth'
    testImplementation 'com.google.testing.compile:compile-testing'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport'
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly 'com.google.auto.service:auto-service'
    annotationProcessor 'com.google.auto.service:auto-service'
    compileOnly "org.immutables:value::annotations"
    annotationProcessor "org.immutables:value"

    compileOnly 'org.derive4j:derive4j-annotation'
    annotationProcessor 'org.derive4j:derive4j'
}

def exports = [
        'jdk.compiler/com.sun.tools.javac.file',
        'jdk.compiler/com.sun.tools.javac.main',
        'jdk.compiler/com.sun.tools.javac.parser',
        'jdk.compiler/com.sun.tools.javac.tree',
        'jdk.compiler/com.sun.tools.javac.util',
        'jdk.compiler/com.sun.tools.javac.code',
        'jdk.compiler/com.sun.tools.javac.api'
]

def jvmArgList = exports.collect { value -> "--add-exports=${value}=ALL-UNNAMED".toString() }

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disable 'StrictUnusedVariable'

    // Allow access to internal javac apis
    options.compilerArgs += jvmArgList

    if (JavaVersion.current() < JavaVersion.VERSION_14) {
        excludes = ['**/Java14InputAstVisitor.java', '**/Java21InputAstVisitor.java']
    }
}

tasks.withType(Test).configureEach {
    jvmArgs = jvmArgList
}

tasks.withType(Javadoc).configureEach {
    // Allow access to internal javac apis
    options.optionFiles << file('../gradle/javadoc.options')

    if (JavaVersion.current() < JavaVersion.VERSION_14) {
        excludes = ['**/Java14InputAstVisitor.java', '**/Java21InputAstVisitor.java']
    }
}

// false positives due to org.junit.runners.* in the test cases
tasks.named("checkJUnitDependencies") {
    enabled = false
}

tasks.named("test") {
    // Run all classes and tests in parallel
    // https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
}


def target21Compiler = javaToolchains.compilerFor {
    it.languageVersion = JavaLanguageVersion.of(21)
}

def target21Launcher = javaToolchains.launcherFor {
    it.languageVersion = JavaLanguageVersion.of(21)
}


sourceSets.create("java21") {
}

sourceSets.create("test21") {
}

tasks.named("compileJava21Java", JavaCompile) {
    it.javaCompiler = target21Compiler
    it.sourceCompatibility = 21
    it.targetCompatibility = 21
    it.source = sourceSets.named("java21").get().java
    it.classpath = project.objects.fileCollection().from(
            sourceSets.named("main").get().output,
            sourceSets.named("main").get().compileClasspath,
            sourceSets.named("java21").get().compileClasspath
    )
}

tasks.named("compileTest21Java", JavaCompile) {
    it.javaCompiler = target21Compiler
    it.sourceCompatibility = 21
    it.targetCompatibility = 21
    it.source = sourceSets.named("test21").get().java
    it.classpath = sourceSets.named("test").get().runtimeClasspath
}

tasks.register("testJava21", Test) {

    it.group = "verification"
    it.javaLauncher.set(target21Launcher.get())

    useJUnitPlatform()

    it.testClassesDirs = project.objects.fileCollection().from(
            sourceSets.named("test21").get().output.classesDirs
    )
    it.classpath = project.objects.fileCollection().from(
            sourceSets.named("test21").get().output,
            sourceSets.named("java21").get().output,
            sourceSets.named("test").get().runtimeClasspath
    )
}


sourceSets.create("java21Preview") {
    java.srcDirs(project.layout.projectDirectory.dir("src/java21Preview/java"))
}

sourceSets.create("test21Preview") {
    java.srcDirs(project.layout.projectDirectory.dir("src/test21Preview/java"))
}

tasks.named("compileJava21PreviewJava", JavaCompile) {
    it.javaCompiler = target21Compiler
    it.sourceCompatibility = 21
    it.targetCompatibility = 21
    options.compilerArgs += '--enable-preview'
    it.source = sourceSets.named("java21Preview").get().java
    it.classpath = objects.fileCollection().from(
            sourceSets.named("main").get().output,
            sourceSets.named("java21").get().output,
            sourceSets.named("main").get().compileClasspath,
            sourceSets.named("java21Preview").get().compileClasspath

    )
}

tasks.named("compileTest21PreviewJava", JavaCompile) {
    it.javaCompiler = target21Compiler
    it.sourceCompatibility = 21
    it.targetCompatibility = 21
    options.compilerArgs += '--enable-preview'
    it.source = sourceSets.named("test21Preview").get().java
    it.classpath = sourceSets.named("test").get().runtimeClasspath
}

tasks.register("testJava21Preview", Test) {

    it.group = "verification"
    it.javaLauncher.set(target21Launcher.get())
    jvmArgs += '--enable-preview'
    useJUnitPlatform()

    it.testClassesDirs = project.objects.fileCollection().from(
            sourceSets.named("test21Preview").get().output.classesDirs
    )
    it.classpath = project.objects.fileCollection().from(
            sourceSets.named("test21Preview").get().output,
            sourceSets.named("java21Preview").get().output,
            sourceSets.named("java21").get().output,
            sourceSets.named("test").get().runtimeClasspath
    )
}

tasks.check { dependsOn(test,testJava21,testJava21Preview) }

// This block may be replaced by BaselineExportsExtension exports
// once https://github.com/gradle/gradle/issues/18824 is resolved.
tasks.named("jar", Jar) {
    manifest {
        attributes('Add-Exports': exports.join(' '))
    }
    it.from(
            sourceSets.named("main").get().output,
            sourceSets.named("java21").get().output,
            sourceSets.named("java21Preview").get().output
    )

}
